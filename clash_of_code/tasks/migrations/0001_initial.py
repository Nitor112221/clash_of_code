# Generated by Django 5.2 on 2025-04-06 08:50

import django.core.validators
import django.db.models.deletion
import tinymce.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=75, verbose_name='name')),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                ('name', models.CharField(max_length=75, verbose_name='name')),
                (
                    'description',
                    tinymce.models.HTMLField(
                        help_text='Explain the idea of the task',
                        max_length=8000,
                        verbose_name='description',
                    ),
                ),
                (
                    'is_public',
                    models.BooleanField(
                        default=False,
                        help_text='If you open the task for public access, other users will be able to add it to their contests, and moderation will be able to evaluate it and add it to the general pool of tasks',
                        verbose_name='is public',
                    ),
                ),
                (
                    'difficult',
                    models.PositiveIntegerField(
                        help_text='Assess the complexity of your task',
                        validators=[django.core.validators.MaxValueValidator(100)],
                        verbose_name='difficult',
                    ),
                ),
                (
                    'auther_solution',
                    models.TextField(
                        help_text="The author's solution is to take a long time to pass all the tests",
                        max_length=8000,
                        verbose_name='author solution',
                    ),
                ),
                (
                    'auther_language',
                    models.TextField(
                        choices=[('Py3.11', 'Python 3.11')],
                        verbose_name='author language',
                    ),
                ),
                (
                    'tags',
                    models.ManyToManyField(
                        blank=True,
                        related_name='tasks',
                        to='tasks.tag',
                        verbose_name='tags',
                    ),
                ),
                (
                    'author',
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tasks',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='author',
                    ),
                ),
            ],
            options={
                'verbose_name': 'task',
                'verbose_name_plural': 'tasks',
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'visible',
                    models.BooleanField(
                        default=False,
                        help_text='If True, then this test will be shown as an example.',
                        verbose_name='visible',
                    ),
                ),
                (
                    'input_data',
                    models.TextField(
                        help_text='Input data for the test. It will be passed to the program during execution via the standard stream',
                        max_length=10000000,
                        verbose_name='input data',
                    ),
                ),
                (
                    'output_data',
                    models.TextField(
                        help_text='Test output. The program should output exactly this text in this format',
                        max_length=10000000,
                        verbose_name='output data',
                    ),
                ),
                (
                    'task',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='tests',
                        to='tasks.task',
                        verbose_name='task',
                    ),
                ),
            ],
            options={
                'verbose_name': 'test case',
                'verbose_name_plural': 'tests cases',
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                (
                    'id',
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'code',
                    models.TextField(
                        editable=False, max_length=8000, verbose_name='code'
                    ),
                ),
                (
                    'lang',
                    models.TextField(
                        choices=[('Py3.11', 'Python 3.11')],
                        editable=False,
                        verbose_name='programming language',
                    ),
                ),
                (
                    'status',
                    models.TextField(
                        choices=[
                            ('OK', 'OK'),
                            ('CE', 'Compilation error'),
                            ('WA', 'Wrong answer'),
                            ('TL', 'Time limit'),
                            ('ML', 'Memory limit'),
                            ('IQ', 'In queue'),
                            ('IP', 'In processing'),
                        ],
                        verbose_name='status',
                    ),
                ),
                (
                    'dispatch_date',
                    models.DateTimeField(
                        auto_now_add=True, verbose_name='dispatch date'
                    ),
                ),
                (
                    'task',
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='solutions',
                        to='tasks.task',
                        verbose_name='task',
                    ),
                ),
                (
                    'test_error',
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='tasks.testcase',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='solutions',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='author',
                    ),
                ),
            ],
        ),
    ]
